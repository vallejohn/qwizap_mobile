name: Deploy to Google Play

on:
  workflow_dispatch:   # allows manual trigger
  push:
    branches:
      - master            # or "master" if that’s your default branch

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # 1️⃣ Checkout your Flutter project
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Create .env file
        run: echo "${{ secrets.ENV_FILE }}" > .env

      # 2️⃣ Set up Flutter
      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.32.8'  # change if needed

      - name: Generate models
        run: flutter pub run build_runner build --delete-conflicting-outputs

      # 3️⃣ Decode your keystore from Base64
      - name: Decode keystore
        run: |
          echo "${{ secrets.ANDROID_KEYSTORE_BASE64 }}" | base64 --decode > android/app/upload-keystore.jks
          chmod 600 android/app/upload-keystore.jks

      # 4️⃣ Configure Gradle with your keystore info
      - name: Configure signing
        run: |
          cat <<EOF > android/key.properties
          storePassword=${{ secrets.KEYSTORE_PASSWORD }}
          keyPassword=${{ secrets.KEY_PASSWORD }}
          keyAlias=${{ secrets.KEY_ALIAS }}
          storeFile=upload-keystore.jks
          EOF

      # 5️⃣ Get dependencies
      - name: Flutter pub get
        run: flutter pub get

      # 6️⃣ Build release .aab
      - name: Build app bundle
        run: flutter build appbundle --release

      # 7️⃣ Upload to Play Console (using service account)
      - name: Upload to Play Store
        uses: r0adkll/upload-google-play@v1
        with:
          serviceAccountJsonPlainText: ${{ secrets.PLAY_SERVICE_ACCOUNT_JSON }}
          packageName: ${{ secrets.PACKAGE_NAME }}
          releaseFiles: build/app/outputs/bundle/release/app-release.aab
          track: internal     # or alpha / beta / production
          status: draft
